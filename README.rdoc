= visual-environments

Automatic visual, in-browser cues about your current environment in Rails 3 applications.

If you're a developer accustomed to working across multiple development and staging environments, you have certainly been in the position where you have multiple browser windows/tabs open with the same site but pointing at different environments.  This gem aims to help you keep your contexts straight!

This is a configurable means for showing, via an updated &lt;title&gt; tag or CSS corner banner, what the current runtime environment is (development, staging, test, etc.)  This functionality is never enabled for production, and fully configurable to exclude other environments as well.

== Install &amp; Configuration

Add the following to your Rails app Gemfile

	gem 'visual-environments'
	
...and run <tt>bundle install</tt>.  Then use the visual-environments generator to install the configuration file to your <tt>config/initializers</tt> directory:

 rails g visual_environments:install

There should now be a new file <tt>config/initializers/visual-environments.rb</tt> with the content

	ActionController::Base::VisualEnvironments.enable_env_in_title = true

	# By default, the corner banner is disabled
	ActionController::Base::VisualEnvironments.enable_env_in_corner_banner = false
	# By default, if the corner banner is enabled it is shown on the right side of the page.  For
	# those pages where it would be better for it to reside in the upper-left corner, uncomment
	# the line below and change the argument to :left.  Current possible values are (:right, :left)
	# ActionController::Base::VisualEnvironments.corner_banner_side = :right

	# By default, the full environment name is used in the visual cues (development, test, etc.)  You
	# can map environment names by using the below setting to alias one environment name to another
	# Example: 'development' -> 'dev' or 'preproduction' -> 'preprod'
	# ActionController::Base::VisualEnvironments.aliases = { 'development' => 'dev' }

	# By default, the visual-environments will be enabled for all environments except production;
	# to exclude additional environments, uncomment the line below and add them to the collection
	# ActionController::Base::VisualEnvironments.excluded_environments = []
	
By default, visual environments are enabled in the page title but disabled for corner banner display.  Also, by default only production environments are excluded from the gem functionality. 

=== Excluding Environments

You can add additional environments to be excluded by adding their names to the <tt>excluded_environments</tt> collection.  For example, let's say you have an app with a test-oriented staging environment as well as a 'almost-ready-for-prime-time' preproduction environment.  In this case you may want the visual cues on the staging but not on preproduction.  In that case you can edit the initializer to:

	ActionController::Base::VisualEnvironments.excluded_environments = ['preproduction']
	
And now preproduction will not use the visual-environments functionality.

Another way to configure is by using Gemfile groups to only conditionally load this gem.  For example, if you have many different environments but only want this gem to operate in development and staging, for example, you can edit your Gemfile thusly:

	gem 'visual-evironments', :groups => [:development, :staging]
	
=== Changing the Side of the Banner

The corner banner is displayed in the upper-right corner of the screen by default.  Some sites, however, may be designed such that a banner in that area would hamper functionality (by covering links, for example).  In that case you can switch the banner to the left side by uncommenting and setting the following line in <tt>config/initializers/visual-environments.rb</tt>:

	ActionController::Base::VisualEnvironments.corner_banner_side = :right
	
=== Aliasing Environment Names

Having the string "[development]" prepended to your title may make things a bit unwieldy for some people.  In that case, you may use the aliasing option to change such an identifier to something shorter (but still identifiable with the environment in question).  For example, you can alias 'development' to 'dev' or 'D', which would result in "[dev]" or "[D]" being prepended to the page title.

To add an alias, uncomment and set the <tt>aliases</tt> setting as follows:

	ActionController::Base::VisualEnvironments.aliases = { 'development' => 'dev', 'preproduction' => 'preprod' }

The above example would show use 'dev' in a development environment and 'preprod' in a preproduction environment.  The point is, you can alias any environment you may use, not just the out-of-the-box environments Rails uses (development, test, production).

== Contributing to visual-environments
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Zachery Moneypenny, David van Leeuwen. See LICENSE.txt for
further details.  

Big Ups to the Mad-Railers for their idea for this gem! If you're coding Ruby/Rails in the Madison, Wisconsin area search for MadRailers on meetup.com or check out the Google Group at http://groups.google.com/group/Mad-Railers

